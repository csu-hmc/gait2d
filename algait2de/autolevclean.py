#!/usr/bin/python

"""This is a Python version of the autolevclean.c program. It is
functionally the same but deals with line endings from any OS and allows you
to pass in different input and output files.

$ python autolevclean.py gait2de_al_raw.c gait2de_al.c

"""

header = \
"""// This file was generated by autolevclean.py and contains C code generated by Autolev

#include <math.h>
#include "gait2de.h"

void gait2d_al(param_struct* par,
               double q[NDOF],
               double qd[NDOF],
               double qdd[NDOF],
               double mom[NDOF],
               double GRF[6],
               double Stick[NSTICK*2])
{

    static double z[1198];
    const double gravity = 9.81;
    double dRHeel, yRHeel, FxRHeel, FyRHeel, xdotRHeel, ydotRHeel;
    double dLHeel, yLHeel, FxLHeel, FyLHeel, xdotLHeel, ydotLHeel;
    double dRToe, yRToe, FxRToe, FyRToe, xdotRToe, ydotRToe;
    double dLToe, yLToe, FxLToe, FyLToe, xdotLToe, ydotLToe;
    double dTrunkO, yTrunkO,FxTrunkO, FyTrunkO, xdotTrunkO, ydotTrunkO;
    double dHip, yHip, FxHip, FyHip, xdotHip, ydotHip;
    double dRKnee, yRKnee, FxRKnee, FyRKnee, xdotRKnee, ydotRKnee;
    double dRAnkle, yRAnkle,FxRAnkle, FyRAnkle, xdotRAnkle, ydotRAnkle;
    double dLKnee, yLKnee, FxLKnee, FyLKnee, xdotLKnee, ydotLKnee;
    double dLAnkle, yLAnkle,FxLAnkle, FyLAnkle, xdotLAnkle, ydotLAnkle;

"""

num_dof = 9

for i in range(9):
    header += "    double q{} = q[{}];\n".format(i + 1, i)
    header += "    double q{}p = qd[{}];\n".format(i + 1, i)
    header += "    double q{}pp;\n".format(i + 1)
    header += "    double mom{} = mom[{}];\n".format(i + 1, i)


def clean(inputfile, outputfile):
    print("Cleansing {} and writing output to {}.".format(inputfile, outputfile))
    with open(inputfile, 'r') as raw, open(outputfile, 'w') as new:
        new.write(header)
        copy = False
        for line in raw:
            if line.strip() == "/* Evaluate constants */":
                copy = True
            elif line.strip() == "/* Evaluate output quantities */":
                copy = False
            elif line.strip() == "/* Write output to screen and to output file(s) */":
                copy = True
            elif line.strip() == "Encode[0] = 0.0;":
                copy = False
            if copy:
                new.write(' ' * 4 + line.strip().replace('par__', 'par->') + '\n')
        new.write("}")

if __name__ == "__main__":

    import argparse
    parser = argparse.ArgumentParser(description="Clean up raw Autolev output.")
    parser.add_argument('-i', '--inputfile', type=str,
        help="The path to the raw Autolev output file.", default='gait2de_al_raw.c')
    parser.add_argument('-o', '--outputfile', type=str,
        help="The path to the cleaned Autolev output file.", default='gait2de_al.c')
    args = parser.parse_args()
    clean(args.inputfile, args.outputfile)
